# rubocop:disable GlobalVars, BlockLength

require 'rails_helper'
require 'json'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TokensController, type: :controller do
  before do
    create(:client)
  end
  # This should return the minimal set of attributes required to create a valid
  # Token. As you add validations to Token, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip('Add a hash of attributes valid for your model')
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TokensController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'Shibboleth POST #create' do
    before do
      request.env['omniauth.auth'] = OmniAuth.config.mock_auth[:shibboleth]
    end
    context 'with valid params' do
      it 'renders a JSON response with the new token' do
        post :create, params: { provider: :shibboleth }, session: valid_session

        # TODO: probably best not to set a global var like this. But right off,
        # I'm not sure of another way to set this for the token.
        $token = assigns(:auth_response)
        expect(response).to redirect_to("https://emory.edu/redirect.html?#{$token.to_query.to_s}")
      end

      it 'validates token' do
        get :verify, params: $token
        expect(JSON.parse(response.body)[0]['data']['email']).to eq('karl@marx.org')
      end

      it 'fails when token is expired' do
        p 'sleeping for 30 secods to let the token expire.'
        sleep(30)
        get :verify, params: $token
        expect(JSON.parse(response.body)['message']).to eq('Token has expired')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the new token' do
        invalid_attributes = {}
        post :create,
             params: { token: invalid_attributes },
             session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'Google OAuth2 POST #create' do
    before do
      request.env['omniauth.auth'] = OmniAuth.config.mock_auth[:google_oauth2]
    end
    context 'with valid params' do
      it 'renders a JSON response with the new token' do
        post :create, params: { provider: :google_oauth2 }, session: valid_session

        # TODO: probably best not to set a global var like this. But right off,
        # I'm not sure of another way to set this for the token.
        $token = assigns(:auth_response)
        expect(response).to redirect_to("https://emory.edu/redirect.html?#{$token.to_query.to_s}")
      end

      it 'validates token' do
        get :verify, params: $token
        expect(JSON.parse(response.body)[0]['data']['email']).to eq('karlmarx@gmail.com')
      end

      it 'fails when token is expired' do
        p 'sleeping for 30 secods to let the token expire.'
        sleep(30)
        get :verify, params: $token
        expect(JSON.parse(response.body)['message']).to eq('Token has expired')
      end
    end

    # context 'with invalid params' do
    #   it 'renders a JSON response with errors for the new token' do
    #     invalid_attributes = {}
    #     post :create,
    #          params: { token: invalid_attributes },
    #          session: valid_session
    #     expect(response).to have_http_status(:unprocessable_entity)
    #     expect(response.content_type).to eq('application/json')
    #   end
    # end
  end
end
